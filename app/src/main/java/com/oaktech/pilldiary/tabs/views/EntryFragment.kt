package com.oaktech.pilldiary

import android.app.AlertDialog
import android.content.DialogInterface
import android.graphics.drawable.ClipDrawable
import android.graphics.drawable.ColorDrawable
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.DividerItemDecoration
import androidx.recyclerview.widget.LinearLayoutManager
import com.oaktech.pilldiary.tabs.controllers.EntryListViewAdapter
import com.oaktech.pilldiary.databinding.EntriesBinding
import com.oaktech.pilldiary.tabs.controllers.ListViewItemClickListener
import com.oaktech.pilldiary.tabs.controllers.PillBase
import com.oaktech.pilldiary.tabs.MainActivity
import java.time.LocalDate
import java.time.LocalTime

/**
 * Enum class describing the types of entries to display
 *
 * e.g. notes - entries not auto-generated by pill administration
 * pillAdministration - entries auto-generated by pill administration
 * all - all entries
 */
enum class EntrySearchType {
    notes,
    pillAdministration,
    all
}

/**
 * Home screen entry list tab fragment
 */
class EntryFragment : Fragment(), ListViewItemClickListener {
    var entryList: ArrayList<Entry> = ArrayList() // list of entries that will be populated
    // from database

    override var highlightedIndex: Int = -1 // index of last selected item in listview
    private lateinit var binding: EntriesBinding // binding of layout file

    var isReversed: Boolean = false // whether to show the list in descending order
    private var textFilter: String = "" // text to filter entry list with
    private var dateFilter: LocalDate? = null // date to filter entry list with
    private var timeFilter: LocalTime? = null // time to filter entry list with
    private var searchType: EntrySearchType = EntrySearchType.all // types of notes to show

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout for this fragment
        binding = EntriesBinding.inflate(inflater, container, false)
        updateEntryList() //populate entry list from database and apply filters
        return binding.root
    }

    override fun onResume() {
        super.onResume()
        updateEntryList() //refresh entry list from database
    }

    /**
     * Method to confirm & implement entry deletion
     *
     * @param position index of entry in entryList
     */
    fun delete(position: Int) {
        val item = entryList.get(position) as Entry
        val builder = AlertDialog.Builder(context)
        builder.setTitle("Delete Entry")
        builder.setMessage("Are you sure you want to delete this entry?")

        val dialogClickListener = DialogInterface.OnClickListener { _, which ->
            when (which) {
                DialogInterface.BUTTON_POSITIVE -> {
                    val base: PillBase = PillBase(context)
                    base.deleteEntry(item)
                    Toast.makeText(context, "Entry succesfully deleted", Toast.LENGTH_SHORT).show()
                    updateEntryList()
                }
            }
        }
        builder.setPositiveButton("Yes", dialogClickListener)
        builder.setNegativeButton("No", dialogClickListener)
        builder.create().show()
    }

    /**
     * Method to populate entry list from database
     */
    fun updateEntryList() {
        val base: PillBase = PillBase(context) // initialize database handler class
        val itemDecor = DividerItemDecoration(context, ClipDrawable.HORIZONTAL)
        itemDecor.setDrawable(ColorDrawable(getResources().getColor(R.color.delete_icon)))
        val listView = binding.listDisplay
        entryList = base.getEntries(
            if (searchType == EntrySearchType.all) null
            else searchType == EntrySearchType.pillAdministration
        )
        if (entryList.isNotEmpty()) {
            // apply other filters
            if (timeFilter != null) {
                // filter based on time
                entryList = entryList.filter { p: Entry ->
                    p.entryDate!!.toLocalTime().equals(timeFilter)
                } as ArrayList<Entry>
            }
            if (dateFilter != null) {
                // filter based on date
                entryList = entryList.filter { p: Entry ->
                    p.entryDate!!.toLocalDate().equals(dateFilter)
                } as ArrayList<Entry>
            }
            if (!textFilter.isBlank()) {
                // filter based on note entry text
                entryList = entryList.filter { p: Entry ->
                    p.entryMessage.lowercase().contains(textFilter.lowercase())
                } as ArrayList<Entry>
            }
            if (isReversed) {
                entryList.sortByDescending { entry -> entry } // sort in descending order if
                // the user applied the filter
            } else {
                entryList.sortBy { entry -> entry } // sort in ascending order
                // of date the entries were made
            }
        }
        // populate listview with entry list data
        val adapter = EntryListViewAdapter(entryList, this)
        listView.addItemDecoration(itemDecor)
        listView.setAdapter(adapter)
        listView.layoutManager = LinearLayoutManager(context)
    }

    /**
     * Method to delete entry at given index if its trash icon is clicked
     *
     * @param position index of entry in entryList
     */
    override fun onTrashClickListener(position: Int) {
        delete(position)
    }

    /**
     * Method to highlight entry at given index when clicked
     *
     * This will make it show its full text i.e. without the max text limit
     *
     * @param position index of entry in entryList
     */
    override fun onCellClickListener(position: Int) {
        highlightedIndex = if (highlightedIndex == position) -1 else position
        updateEntryList() // refresh entry list from database
    }

    /**
     * Method to edit entry at given index when it is long pressed
     *
     * @param position index of entry in entryList
     */
    override fun onCellLongClickListener(position: Int) {
        val item = entryList.get(position)
        val mainActivity = activity as MainActivity
        mainActivity.showEntryManagementDialog(item)
    }

    /**
     * Method to reverse sorting order of list view
     */
    fun reverse() {
        isReversed = !isReversed
        highlightedIndex = -1
        updateEntryList() // refresh entry list from database
    }

    /**
     * Method to filter entries by text they contain
     *
     * @param text method will check if entryMessage contains this value
     */
    fun setTextFilter(text: String) {
        textFilter = text
        updateEntryList() // refresh entry list from database
    }

    /**
     * Method to apply filters to list view
     *
     * @param filters filter values to be applied
     */
    fun applyFilters(filters: EntryFilter) {
        dateFilter = filters.dateFilter // set date to filter by
        timeFilter = filters.timeFilter // set time to filter by
        searchType = filters.searchType // set entry type to filter by
        updateEntryList() // refresh entry list from database
    }

    /**
     * Method to remove all filters from list view
     */
    fun clearFilters() {
        textFilter = ""
        dateFilter = null
        timeFilter = null
        searchType = EntrySearchType.all
        updateEntryList() // refresh entry list from database
    }

    fun getFilters(): EntryFilter {
        // get all current filters being applied
        return EntryFilter(dateFilter, timeFilter, searchType)
    }
}

/**
 * Data class containing data of all the filters being applied
 */
class EntryFilter(
    var dateFilter: LocalDate?,
    var timeFilter: LocalTime?,
    var searchType: EntrySearchType = EntrySearchType.all
)